<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[冰果的前端手记]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2015-09-30T10:46:32.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[冰果]]></name>
    <email><![CDATA[hszy00232@163.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Hexo升级后遇到的几个问题]]></title>
    <link href="http://yoursite.com/2015/09/30/tool-git-deploy/"/>
    <id>http://yoursite.com/2015/09/30/tool-git-deploy/</id>
    <published>2015-09-30T10:46:32.000Z</published>
    <updated>2015-09-30T10:46:32.000Z</updated>
    <content type="html"><![CDATA[<p>HEXO升级到3+以后，不可避免的带来了一些坑。</p>
<h2 id="hexo_Deployer_not_found:_github_是什么情况">hexo Deployer not found: github 是什么情况</h2><p>执行<code>hexo deploy</code>时，提示<code>ERROR Deployer not found: github</code></p>
<p>解决方案：<br>在version 3中的配置文件__config.yml，需要将type: github修改为type: git<br>然后执行命令：<code>npm install hexo-deployer-git --save</code></p>
<p>如此就可正常使用。<a id="more"></a></p>
<h2 id="无法生成feed-xml和sitemap-xml">无法生成feed.xml和sitemap.xml</h2><p>解决方案：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure></p>
<p>然后在__config.yml配置文件中追加信息：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">Plugins:</span><br><span class="line">- hexo-generator-sitemap</span><br><span class="line">- hexo-generator-feed</span><br><span class="line"></span><br><span class="line">#sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: /sitemap.xml</span><br><span class="line">#Feed Atom</span><br><span class="line">feed:</span><br><span class="line">  type: atom</span><br><span class="line">  path: /atom.xml</span><br><span class="line">  limit: 20</span><br></pre></td></tr></table></figure>
<h2 id="hexo_deploy时提示Erro">hexo deploy时提示Erro</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Error</span>: error: RPC failed; result=<span class="number">56</span>, HTTP code = <span class="number">200</span></span><br><span class="line">fatal: The remote end hung up unexpectedly</span><br></pre></td></tr></table></figure>
<p>在网上搜了一下大概是网络的问题，设置了一个git代理来解决</p>
<p>git代理的设置：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global http.proxy http:<span class="comment">//xx.xx.xx.xx:xxxx</span></span><br><span class="line">git config --global https.proxy http:<span class="comment">//xx.xx.xx.xx:xxxx</span></span><br></pre></td></tr></table></figure>
<p>再次尝试执行<code>hexo deploy</code>成功！</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>HEXO升级到3+以后，不可避免的带来了一些坑。</p>
<h2 id="hexo_Deployer_not_found:_github_是什么情况">hexo Deployer not found: github 是什么情况</h2><p>执行<code>hexo deploy</code>时，提示<code>ERROR Deployer not found: github</code></p>
<p>解决方案：<br>在version 3中的配置文件__config.yml，需要将type: github修改为type: git<br>然后执行命令：<code>npm install hexo-deployer-git --save</code></p>
<p>如此就可正常使用。]]>
    
    </summary>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[MacOS安装配置MAMP]]></title>
    <link href="http://yoursite.com/2015/08/16/tool-mapm-mac-guide/"/>
    <id>http://yoursite.com/2015/08/16/tool-mapm-mac-guide/</id>
    <published>2015-08-16T09:00:59.000Z</published>
    <updated>2015-09-30T09:01:06.000Z</updated>
    <content type="html"><![CDATA[<p>MAMP用来在Mac环境下搭建Apache、MySQL、PHP平台。<a id="more"></a></p>
<h2 id="安装步骤：">安装步骤：</h2><ol>
<li>下载最新版本<a href="https://www.mamp.info/en/downloads/" target="_blank">官方网站</a><br><img src="http://7nariv.com1.z0.glb.clouddn.com/6C7C07D5-AE2E-4B55-9C58-149132FA77A2.png" alt=""></li>
<li>执行PKG文件，安装MAMP<br><img src="http://7nariv.com1.z0.glb.clouddn.com/CDB7F7CD-228A-4E0C-88B1-1276B47054B7.png" alt=""></li>
<li>安装完成后，执行MAMP<br><img src="http://7nariv.com1.z0.glb.clouddn.com/7599B68A-6DB1-4F6D-846A-7EA670FE0778.png" alt=""></li>
<li>弹出警告窗口，选择【Launch MAMP】<br><img src="http://7nariv.com1.z0.glb.clouddn.com/4bed2e738bd4b31cfc6e35ac84d6277f9e2ff853.jpg" alt=""></li>
<li>浏览器会启动显示一个欢迎界面，URL地址：<code>http://localhost:8888</code>开头<br><img src="http://7nariv.com1.z0.glb.clouddn.com/377adab44aed2e73f238273b8401a18b86d6fad0.jpg" alt=""></li>
<li>打开MAMP控制面板，<code>Apache Server</code>和<code>MySQL Server</code>右侧绿灯表示两个服务都已启动<br><img src="http://7nariv.com1.z0.glb.clouddn.com/DCD1F24D-62B4-465D-AECD-60CF87D1BA98.png" alt=""></li>
</ol>
<h2 id="配置">配置</h2><p>打开MAMP控制面板，点击<code>Preferences...</code>进行配置</p>
<h3 id="1-端口配置">1.端口配置</h3><p>从打开面板顶部选择【Ports】,面板显示Apache和MySQL分别运行在端口8888和8889上。<br><img src="http://7nariv.com1.z0.glb.clouddn.com/70AD7F03-2C6D-428D-9762-3D2FECD1F97C.png" alt=""><br>点击<code>【Set Web &amp; MySQL Ports to 80 &amp; 3306】</code>。</p>
<p>Apache端口设置为80，MySQL端口为3306，这两个端口为标准端口。<br><img src="http://7nariv.com1.z0.glb.clouddn.com/4991E46E-7A03-4353-BB4F-08866EE78806.png" alt=""><br>重启服务器，浏览器将重新输入MAMP欢迎页面。这时的访问地址为<code>http://localhost/</code>,不再需要端口号。<br><img src="http://7nariv.com1.z0.glb.clouddn.com/e4dde71190ef76c655ba583c9e16fdfaaf5167b9.jpg" alt=""></p>
<h3 id="2-文件位置配置">2.文件位置配置</h3><p>面板顶部选择【Web Server】,面板显示<code>Web Server</code>和<code>Document Root</code>,点击右侧文件夹图标，选择文件的存放地儿，点击Ok完成配置<br><img src="http://7nariv.com1.z0.glb.clouddn.com/B5D9B480-7EB8-4B9E-8245-1B9F15CD0A70.png" alt=""><br>把网站内容放在该目录下，在浏览器中输入<code>http://localhost/xxx.html</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>MAMP用来在Mac环境下搭建Apache、MySQL、PHP平台。]]>
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery.fn.init]]></title>
    <link href="http://yoursite.com/2015/07/24/code-jquery.fn.init/"/>
    <id>http://yoursite.com/2015/07/24/code-jquery.fn.init/</id>
    <published>2015-07-24T13:00:59.000Z</published>
    <updated>2015-09-30T09:03:20.000Z</updated>
    <content type="html"><![CDATA[<h2 id="主要功能分支：">主要功能分支：</h2><ul>
<li>selector可以转换为false,如””,null,undefined,false,返回this 示例：<code>$(undefined)</code></li>
<li>selector为字符串 示例：<code>$(&quot;&lt;div&gt;&lt;/div&gt;)或$(&quot;#id&quot;)或$(&quot;div&quot;)</code>等</li>
<li>selector为DOM元素,手动设置第一个元素和属性context指向该DOM元素，属性length为1，然后返回包含该DOM元素引用的jQuery对象 示例：<code>$(document)</code></li>
<li>selector是函数，则认为是绑定ready事件，示例：<code>$(function(){})</code></li>
<li>selector是jQuery对象，参数selector包含属性selector，则认为它是jQuery对象，将会复制它的属性selector和context 示例：<code>$($(&#39;div p&#39;))</code></li>
</ul>
<a id="more"></a>
<h2 id="jQuery选择器支持9种方式的处理">jQuery选择器支持9种方式的处理</h2><p>API:</p>
<ul>
<li>jQuery( selector[,context] ); $(“.test”,$(“body”));</li>
<li>jQuery( element ) 示例：$(document);</li>
<li>jQuery( elementArray ) 示例：$(myForm.elements);</li>
<li>jQuery( object ) 示例：$({foo:”bar”,hello:”hello”});</li>
<li>jQuery( jQuery object ) 示例：$($(‘.test’));</li>
<li>jQuery(); 示例：$();$(false);</li>
<li>jQuery( html[,ownerDocument] ) 示例：$(“\<br>“,document);</li>
<li>jQuery( html,attributes ) 示例：$(“\<img \="">“,{“src”:”a.png”});</li>
<li>jQuery( callback ) 示例：$(function(){});</li>
</ul>
<p>代码组织结构:<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">init : function(selector, context, rootjQuery)&#123;&#10;&#9;var match,elem;&#10;&#9;// HANDLE: $(&#34;&#34;), $(null), $(undefined), $(false)&#10;&#9;if(!selector)&#123;&#10;&#9;&#9;return this;&#10;&#9;&#125;&#10;&#9;// Handle HTML strings&#10;&#9;if(typeof selector === &#39;string&#39;)&#123;&#10;&#9;// HANDLE: $(DOMElement)&#10;&#9;&#125;else if(selector.nodeType)&#123;&#10;&#9;&#9;this.context = this[0] = selector;&#10;&#9;&#9;this.length = 1;&#10;&#9;&#9;return this;&#10;&#9;// HANDLE: $(function)&#10;&#9;// Shortcut for document ready&#10;&#9;&#125;else if(jQuery.isFunction(selector))&#123;&#10;&#9;&#9;return rootjQuery.ready(selector);&#10;&#9;&#125;&#10;&#9;if(selector.selector !== undefined)&#123;&#10;&#9;&#9;this.selector = selector.selector;&#10;&#9;&#9;this.context  = selector.context;&#10;&#9;&#125;&#10;&#9;return jQuery.makeArray(selector,this);&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="正则解析">正则解析</h2><p><strong>rquickExpr</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rquickExpr = <span class="regexp">/^(?:\s*(&lt;[\w\W]+&gt;)[^&gt;]*|#([\w-]*))$/</span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li><code>(?:pattern)</code>:匹配 pattern 但不捕获该匹配的子表达式，即它是一个非捕获匹配，不存储供以后使用的匹配。这对于用“or”字符 (|) 组合模式部件的情况很有用。例如，’industr(?:y|ies) 是比 ‘industry|industries’ 更经济的表达式。</li>
<li>选择二义 : 匹配<code>\s*(&lt;[\w\W]+&gt;)[^&gt;]*</code>开头或<code>#([\w-]*)</code>结尾</li>
<li>\s*(&lt;[\w\W]+&gt;)[^&gt;]*:<ul>
<li>\s*:匹配任何空白字符，包括空格、制表符、换页符等等零次或多次,等价于{0,}</li>
<li>(pattern):匹配pattern 并获取这一匹配。所获取的匹配可以从产生的 Matches 集合得到，使用 $0…$9 属性</li>
<li>[\w\W]+:匹配于’[A-Za-z0-9<em>]’或[^A-Za-z0-9</em>]’ 一次或多次,等价{1,}</li>
<li>(&lt;[wW]+&gt;) :这个表示字符串里要包含用\&lt;>包含的字符，例如\<p\>,\<div\>等等都是符合要求的</div\></p\></li>
<li>[^&gt;]* : 负值字符集合,字符串尾部是除了>的任意字符或者没有字符,零次或多次等价于{0,}</li>
</ul>
</li>
<li>#([\w-]*):匹配结尾带上#号的任意字符，包括下划线与-</li>
<li>exec方法介绍：如果 exec() 找到了匹配的文本，则返回一个结果数组。否则，返回 null。<ul>
<li>此数组的第 0 个元素是与正则表达式相匹配的文本<ul>
<li>第1个元素是与RegExpObject的第1个子表达式相匹配的文本（如果有的话） </li>
<li>第2个元素是与RegExpObject的第2个子表达式相匹配的文本（如果有的话），以此类推</li>
</ul>
</li>
</ul>
</li>
</ol>
<p>正则测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rquickExpr = <span class="regexp">/^(?:\s*(&lt;[\w\W]+&gt;)[^&gt;]*|#([\w-]*))$/</span>;</span><br><span class="line"><span class="built_in">console</span>.log(rquickExpr.exec(<span class="string">"#id"</span>));<span class="comment">//["#id",undefined,"id"];</span></span><br><span class="line"><span class="built_in">console</span>.log(rquickExpr.exec(<span class="string">"&lt;div&gt;"</span>));<span class="comment">//["&lt;div&gt;","&lt;div&gt;",undefined];</span></span><br><span class="line"><span class="built_in">console</span>.log(rquickExpr.exec(<span class="string">"  &lt;div&gt;"</span>));<span class="comment">//["  &lt;div&gt;","&lt;div&gt;",undefined];</span></span><br><span class="line"><span class="built_in">console</span>.log(rquickExpr.exec(<span class="string">"  &lt;div&gt;abc#id"</span>));</span><br><span class="line"><span class="built_in">console</span>.log(rquickExpr.exec(<span class="string">"#id&lt;div&gt;"</span>));<span class="comment">//null</span></span><br></pre></td></tr></table></figure></p>
<p><strong>rsingleTag</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rsingleTag = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>;</span><br></pre></td></tr></table></figure></p>
<ol>
<li>^&lt;(\w+)\s*\/?&gt;：以<code>&lt;</code>开头，跟一个或多个字符和任意个空白字符，接着判断<code>/</code>出现0次或1次，从而判断是否自关闭或不关闭，<code>(\w+)</code>该分组中不包含左右尖括号，不能包含属性。</li>
<li>(?:&lt;\/\1&gt;|)$：<code>\1</code>指向匹配的第一个分组<code>(\w+)</code></li>
</ol>
<p>正则测试：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> rsingleTag = <span class="regexp">/^&lt;(\w+)\s*\/?&gt;(?:&lt;\/\1&gt;|)$/</span>;</span><br><span class="line">rsingleTag.exec(<span class="string">"&lt;div&gt;"</span>);<span class="comment">//["&lt;div&gt;", "div"]</span></span><br><span class="line">rsingleTag.exec(<span class="string">"&lt;div&gt;abc"</span>);<span class="comment">//null</span></span><br><span class="line">rsingleTag.exec(<span class="string">"&lt;img/&gt;"</span>);<span class="comment">//["&lt;img/&gt;", "img"]</span></span><br><span class="line">rsingleTag.exec(<span class="string">"&lt;img name/&gt;"</span>);<span class="comment">//null</span></span><br></pre></td></tr></table></figure></p>
<h2 id="match的取值">match的取值</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( selector.charAt(<span class="number">0</span>) === <span class="string">"&lt;"</span> &amp;&amp; selector.charAt( selector.length - <span class="number">1</span> ) === <span class="string">"&gt;"</span> &amp;&amp; selector.length &gt;= <span class="number">3</span> ) &#123;</span><br><span class="line">	<span class="comment">// Assume that strings that start and end with &lt;&gt; are HTML and skip the regex check</span></span><br><span class="line">	match = [ <span class="literal">null</span>, selector, <span class="literal">null</span> ];</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	match = rquickExpr.exec( selector );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>selector如果以<code>&lt;</code>开头，以<code>&gt;</code>结尾，并且selector.length大于3就假设这个字符串是HTML片段。否则，用正则rquickExpr.exec检测较为复杂的HTML代码或#id。相关结果都存储在match中。</p>
<ul>
<li>match[0]:表示输入的selector</li>
<li>match[1]:表示匹配的HTML代码或undefined</li>
<li>match[2]:表示匹配的Id或undefined</li>
</ul>
<h2 id="匹配模式一：html代码\">匹配模式一：html代码\<htmltag></htmltag></h2><p><strong>参数selector是HTML代码，或者是#id，并且未传入参数context</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>( match &amp;&amp; (match[<span class="number">1</span>] || !context) )&#123;&#125;</span><br></pre></td></tr></table></figure></p>
<h3 id="参数selector是HTML代码的处理">参数selector是HTML代码的处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(match[<span class="number">1</span>])&#123;</span><br><span class="line">	context &amp;&amp; context <span class="keyword">instanceof</span> jQuery ? context[<span class="number">0</span>] : context;</span><br><span class="line"></span><br><span class="line">	jQuery.merge(<span class="keyword">this</span>,jQuery.parseHTML(</span><br><span class="line">		match[<span class="number">1</span>],</span><br><span class="line">		context &amp;&amp; context.nodeType ? context.ownerDocument || context : <span class="built_in">document</span>,</span><br><span class="line">		<span class="literal">true</span></span><br><span class="line">	));</span><br><span class="line">	<span class="comment">// 示例：$("&lt;div&gt;",&#123;"prop":"name"&#125;);</span></span><br><span class="line">	<span class="keyword">if</span>(rsingleTag.test(match[<span class="number">1</span>]) &amp;&amp; jQuery.isPlainObject(context))&#123;</span><br><span class="line">		<span class="keyword">for</span>(match <span class="keyword">in</span> context)&#123;</span><br><span class="line">			<span class="keyword">if</span>(jQuery.isFunction(<span class="keyword">this</span>[match]))&#123;</span><br><span class="line">				<span class="keyword">this</span>[match](context[match]);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				<span class="keyword">this</span>.attr(match,context[match]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line"><span class="comment">// HANDLE: $(#id)</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>一. 当传入context时，判断context是否为jQuery对象，如果是直接取context[0]，直接取context的html元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context &amp;&amp; context <span class="keyword">instanceof</span> jQuery ? context[<span class="number">0</span>] : context;</span><br></pre></td></tr></table></figure></p>
<p>二. ownerDocument与documentElement区别<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">context &amp;&amp; context.nodeType ? context.ownerDocument || context : <span class="built_in">document</span></span><br></pre></td></tr></table></figure></p>
<ul>
<li>node.ownerDocument是Node对象的属性，返回当前节点所在文档的文档节点，即document对象</li>
<li>document.documentElement是Document对象属性，返回文档对象（document）的根元素（例如：HTML文档的<html>元素）</html></li>
</ul>
<p>三. 调用jQuery.merge()和jQuery.parseHTML(),进行创建新元素或创建代码片断的处理</p>
<ul>
<li>jQuery.merge(first,second)合并两个数组内容到第一个数组。</li>
<li>jQuery.parseHTML(data[,context][,keepScripts])将字符串转换为一组DOM元素。</li>
</ul>
<p><strong>jQuery.parseHTML</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">"Hello,&lt;b&gt;my name is&lt;/b&gt; jQuery."</span>;</span><br><span class="line">$.parseHTML(str);<span class="comment">//["Hello,",&lt;b&gt;my name is&lt;/b&gt;," jQuery."]</span></span><br></pre></td></tr></table></figure></p>
<p>jQuery.parseHTML的源码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">parseHTML:<span class="function"><span class="keyword">function</span>(<span class="params">data,context,keepScripts</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(!data || <span class="keyword">typeof</span> data !== <span class="string">"string"</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> context === <span class="string">"boolean"</span>)&#123;</span><br><span class="line">		keepScripts = context;</span><br><span class="line">		context = <span class="literal">false</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	context = context || <span class="built_in">document</span>;</span><br><span class="line">	<span class="keyword">var</span> parsed = rsingleTag.exec(data),</span><br><span class="line">		scritps = !keepScripts || [];</span><br><span class="line">	<span class="keyword">if</span>(parsed)&#123;</span><br><span class="line">		<span class="keyword">return</span> [context.createElement(parsed[<span class="number">1</span>])];</span><br><span class="line">	&#125;</span><br><span class="line">	parsed = jQuery.buildFragment([data],context,scritps);</span><br><span class="line">	<span class="keyword">if</span>(scritps)&#123;</span><br><span class="line">		jQuery(scritps).remove();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> jQuery.merge([],parsed.childNodes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<ul>
<li><code>var parsed = rsingleTag.exec(data);</code>通过正则判断传入的data是否为单独标签，如果是则调用createElement创建标签对应的DOM元素，并且把创建的DOM元素放入数组中，是为了在后面方便的调用jQuery.merge()方法。</li>
<li><code>parsed = jQuery.buildFragment([data],context,scripts);</code>如果data是个复杂的html代码，则利用浏览器的innerHTML机制创建DOM元素。</li>
</ul>
<p>四. 当HTML代码是单独标签，且第二参数context为一个非空纯对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(rsingleTag.test(match[<span class="number">1</span>]) &amp;&amp; jQuery.isPlainObject(context))&#123;</span><br><span class="line">	<span class="keyword">for</span>(match <span class="keyword">in</span> context)&#123;</span><br><span class="line">		<span class="keyword">if</span>(jQuery.isFunction(<span class="keyword">this</span>[match]))&#123;</span><br><span class="line">			<span class="keyword">this</span>[match](context[match]);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">this</span>.attr(match,context[match]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p><code>jQuery.isPlainObject()</code>判断当前传入的内容是否是纯粹对象（通过”{}”或new Object创建）</p>
<p>示例：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>);</span><br><span class="line">$(<span class="string">"&lt;img/&gt;"</span>);</span><br><span class="line">$(<span class="string">"&lt;div&gt;&lt;/div&gt;"</span>,&#123;<span class="string">"test"</span>,<span class="string">"test"</span>&#125;);</span><br></pre></td></tr></table></figure></p>
<p>通过for读取context属性，如果当前jQuery对象也有这个属性并且属性为function,则调用该jQuery对象的这个属性，传入的参数为context中该属性的值；如果该属性不为function，则调用attr,把context的当前属性和值添加到当前jQuery对象上。<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var jqHTML = $("&lt;div&gt;&lt;/div&gt;",&#123;class:'css-class',data-name:'data-val'&#125;);</span><br><span class="line">jqHTML.attr['class'];//css-class</span><br><span class="line">jqHTML.attr['data-nae'];//data-val</span><br></pre></td></tr></table></figure></p>
<h2 id="匹配模式二：$(“#id”),context未传入">匹配模式二：$(“#id”),context未传入</h2><h3 id="参数selector是#id，context未传入时的处理">参数selector是#id，context未传入时的处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( match &amp;&amp; (match[<span class="number">1</span>] || !context) ) &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// HANDLE: $(html) -&gt; $(array)</span></span><br><span class="line">	<span class="keyword">if</span> ( match[<span class="number">1</span>] ) &#123;</span><br><span class="line">		...</span><br><span class="line"></span><br><span class="line">	<span class="comment">// HANDLE: $(#id)</span></span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		elem = <span class="built_in">document</span>.getElementById( match[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line">		<span class="comment">// Check parentNode to catch when Blackberry 4.6 returns</span></span><br><span class="line">		<span class="comment">// nodes that are no longer in the document #6963</span></span><br><span class="line">		<span class="keyword">if</span> ( elem &amp;&amp; elem.parentNode ) &#123;</span><br><span class="line">			<span class="comment">// Handle the case where IE and Opera return items</span></span><br><span class="line">			<span class="comment">// by name instead of ID</span></span><br><span class="line">			<span class="keyword">if</span> ( elem.id !== match[<span class="number">2</span>] ) &#123;</span><br><span class="line">				<span class="keyword">return</span> rootjQuery.find( selector );</span><br><span class="line">			&#125;</span><br><span class="line"></span><br><span class="line">			<span class="comment">// Otherwise, we inject the element directly into the jQuery object</span></span><br><span class="line">			<span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">			<span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">		<span class="keyword">this</span>.context = <span class="built_in">document</span>;</span><br><span class="line">		<span class="keyword">this</span>.selector = selector;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">elem = <span class="built_in">document</span>.getElementById( match[<span class="number">2</span>] );</span><br><span class="line"></span><br><span class="line"><span class="comment">// Check parentNode to catch when Blackberry 4.6 returns</span></span><br><span class="line"><span class="comment">// nodes that are no longer in the document #6963</span></span><br><span class="line"><span class="keyword">if</span> ( elem &amp;&amp; elem.parentNode ) &#123;</span><br><span class="line">	<span class="comment">// Handle the case where IE and Opera return items</span></span><br><span class="line">	<span class="comment">// by name instead of ID</span></span><br><span class="line">	<span class="keyword">if</span> ( elem.id !== match[<span class="number">2</span>] ) &#123;</span><br><span class="line">		<span class="keyword">return</span> rootjQuery.find( selector );</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// Otherwise, we inject the element directly into the jQuery object</span></span><br><span class="line">	<span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.context = <span class="built_in">document</span>;</span><br><span class="line"><span class="keyword">this</span>.selector = selector;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br></pre></td></tr></table></figure>
<p>一. 调用document.getElementById()查找含有指定id属性的DOM元素。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem = <span class="built_in">document</span>.getElementById(match[<span class="number">2</span>]);</span><br></pre></td></tr></table></figure></p>
<p>二. 检查parentNode属性，因为Blackberry4.6会返回已经不在文档中的DOM节点<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">elem &amp;&amp; elem.parentNode</span><br></pre></td></tr></table></figure></p>
<p>如果所找到的元素的id与传入的值不等，则调用Sizzle查找并返回一个含有选中元素的新jQuery对象。即使是document.getElementById()这样核心的方法也需要考虑浏览器的兼容问题，在IE6,IE7,某些版本的Opera中，可能会按属性name查找而不是id.</p>
<p>如下面的示例：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="doctype">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">html</span> <span class="attribute">lang</span>=<span class="value">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">charset</span>=<span class="value">"UTF-8"</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="title">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"head meta description"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"description"</span>&gt;</span></span><br><span class="line">		body div description</span><br><span class="line">	<span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">form</span> <span class="attribute">name</span>=<span class="value">"divId"</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"divId"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="title">script</span>&gt;</span><span class="handlebars"><span class="xml"></span><br><span class="line">		alert(document.getElmentById("desc").outerHTML);</span><br><span class="line">		//IE7返回：<span class="tag">&lt;<span class="title">meta</span> <span class="attribute">name</span>=<span class="value">"description"</span> <span class="attribute">content</span>=<span class="value">"head meta description"</span>&gt;</span></span><br><span class="line">		alert(document.getElmentById("divId").outerHTML);</span><br><span class="line">		//IE7返回：<span class="tag">&lt;<span class="title">form</span> <span class="attribute">name</span>=<span class="value">"divId"</span>&gt;</span><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"divId"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">form</span>&gt;</span></span><br><span class="line">	</span></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>三. 如果所找到的元素的属性id值与传入的值相等，则设置第一个元素，属性length,selector,context，并返回当前jQuery对象。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.length = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">this</span>[<span class="number">0</span>] = elem;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.context = <span class="built_in">document</span>;</span><br><span class="line"><span class="keyword">this</span>.selector = selector;</span><br></pre></td></tr></table></figure></p>
<h2 id="匹配模式三：$(selector),selector选择器表达式">匹配模式三：$(selector),selector选择器表达式</h2><p>如果第一个元素是一个选择器，如<code>.className</code>，且未指定上下文<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> rootjQuery.find(selector);</span><br></pre></td></tr></table></figure></p>
<h2 id="匹配模式四：$(selector,context)context是jQuery对象">匹配模式四：$(selector,context)context是jQuery对象</h2><p>如果第一个元素是一个选择器，如<code>.className</code>，指定上下文是jQuery对象<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> context.find(selector);</span><br></pre></td></tr></table></figure></p>
<p>两种模式结合统一这样处理：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> (context || rootjQuery).find(selector);</span><br></pre></td></tr></table></figure></p>
<h2 id="匹配模式五：$(selector,context)context不是jQuery对象">匹配模式五：$(selector,context)context不是jQuery对象</h2><p>如果第一个元素是一个选择器，如<code>.className</code>，指定上下文是不是jQuery对象，则执行<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.constructor(context).find(selector);</span><br></pre></td></tr></table></figure></p>
<p>先创建一个包含了context的jQuery对象，然后在该jQuery对象上调用方法<code>.find()</code>。</p>
<h2 id="匹配模式六：$(jQuery对象)">匹配模式六：$(jQuery对象)</h2><p>如果参数selector含有属性selector，则认为它是jQuery对象，将会复制它的属性selector和context。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> ( selector.selector !== <span class="literal">undefined</span> ) &#123;</span><br><span class="line">	<span class="keyword">this</span>.selector = selector.selector;</span><br><span class="line">	<span class="keyword">this</span>.context = selector.context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<h2 id="匹配模式七：$(fn)">匹配模式七：$(fn)</h2><p>如果参数selector是函数，则认为是绑定ready事件。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> rootjQuery.ready(selector);</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="主要功能分支：">主要功能分支：</h2><ul>
<li>selector可以转换为false,如””,null,undefined,false,返回this 示例：<code>$(undefined)</code></li>
<li>selector为字符串 示例：<code>$(&quot;&lt;div&gt;&lt;/div&gt;)或$(&quot;#id&quot;)或$(&quot;div&quot;)</code>等</li>
<li>selector为DOM元素,手动设置第一个元素和属性context指向该DOM元素，属性length为1，然后返回包含该DOM元素引用的jQuery对象 示例：<code>$(document)</code></li>
<li>selector是函数，则认为是绑定ready事件，示例：<code>$(function(){})</code></li>
<li>selector是jQuery对象，参数selector包含属性selector，则认为它是jQuery对象，将会复制它的属性selector和context 示例：<code>$($(&#39;div p&#39;))</code></li>
</ul>]]>
    
    </summary>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="jQuery源码阅读" scheme="http://yoursite.com/categories/jQuery%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery总体架构]]></title>
    <link href="http://yoursite.com/2015/07/24/code-jquery-framework/"/>
    <id>http://yoursite.com/2015/07/24/code-jquery-framework/</id>
    <published>2015-07-24T12:00:00.000Z</published>
    <updated>2015-09-30T09:06:06.000Z</updated>
    <content type="html"><![CDATA[<h2 id="jQuery的模块分类和主要依赖关系">jQuery的模块分类和主要依赖关系</h2><p><img src="http://7nariv.com1.z0.glb.clouddn.com/jQuery总体架构.png" alt="jQuery总体架构"></p>
<a id="more"></a>
<h3 id="jQuery入口模块">jQuery入口模块</h3><p><strong>构建jQuery对象</strong> jQuery()<br>参见: 选择器 Sizzle</p>
<h3 id="底层支持模块">底层支持模块</h3><p><strong>工具方法 Utilities</strong><br>提供一些编程辅助方法，用于简化对jQuery对象，DOM元素，数组，对象，字符串等的操作。其他所有的模块都会用到方法模块。<br>参见: 功能模块</p>
<p><strong>浏览器功能测试 Support</strong><br>针对不同浏览器功能和bug的测试结果，其他模块基于这些测试结果来解决浏览器之间的兼容问题。<br>参见: 功能模块</p>
<p><strong>回调函数列表 Callbacks Object</strong><br>增强对回调函数的管理，支持添加、移除、触发、锁定、禁用回调函数等功能。<br>参见: 异步队列 Deferred Object</p>
<p><strong>异步队列 Deferred Object</strong><br>解耦异步任务和回调函数，它在回调函数列表的基础为回调函数增加了状态，并提供了多个回调函数列表，支持传播任意同步或异步回调函数的成功或失败状态。<br>参见: 回调函数列表 Callbacks Object, 异步请求 Ajax</p>
<p><strong>数据缓存 Data</strong><br>为DOM元素和Javascript对象附加任意类型的数据。<br>参见: 队列 Queue, 事件系统 Events</p>
<p><strong>队列 Queue</strong><br>管理一组函数，支持函数的入队和出队操作，并确保函数按顺序执行，它基于数据缓存模块实现。<br>参见: 数据缓存 Data, 动画 Effects</p>
<p><strong>选择器 Sizzle</strong><br>纯javascript实现的CSS选择器，用于查找与选择器表达式匹配的元素集合<br>参见: 构建jQuery对象 jQuery()</p>
<h3 id="功能模块">功能模块</h3><p>参见: 工具方法 Utilities, 浏览器功能测试 Support</p>
<p><strong>属性操作 Attributes</strong><br>对HTML属性和DOM属性进行读取、设置和移除操作</p>
<p><strong>事件系统 Events</strong><br>提供统一的事件绑定、响应、手动触发和移除机制，它并没有将事件直接绑定到DOM元素上，而是基于数据缓存来管理事件<br>参见: 数据缓存 Data</p>
<p><strong>DOM遍历 Taversing</strong><br>在DOM树中遍历父元素、子元素和兄弟元素</p>
<p><strong>DOM操作 Manipulation</strong><br>插入、移除、复制和替换DOM元素</p>
<p><strong>样式操作 CSS</strong><br>计算样式 &amp; 内联样式；<br>坐标 Offset（读取或设置DOM元素的文档坐标）；<br>尺寸 Dimensions（获取DOM元素的高度和宽度）</p>
<p><strong>异步请求 Ajax</strong><br>基于异步队列模块来管理和触发回调函数<br>参见: 异步队列 Deferred Object</p>
<p><strong>动画 Effects</strong><br>基于队列模块来管理和执行动画函数<br>参见: 队列 Queue</p>
<h3 id="jQuery源码的总体结构">jQuery源码的总体结构</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"> window,undefined </span>)</span>&#123;</span><br><span class="line">	<span class="comment">// 构造jQuery对象</span></span><br><span class="line">	<span class="keyword">var</span> jQuery = <span class="function"><span class="keyword">function</span>(<span class="params">selector,context</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> jQuery.fn.init(selector,context,rootjQuery);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 一堆局部变量声明</span></span><br><span class="line">	jQuery.fn = jQuery.prototype = &#123;</span><br><span class="line">		constructor : jQuery,</span><br><span class="line">		init : <span class="function"><span class="keyword">function</span>(<span class="params">selector, context, rootjQuery</span>)</span>&#123;...&#125;</span><br><span class="line">		<span class="comment">// 一堆原型属性和方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	jQuery.fn.init.prototype = jQuery.fn;</span><br><span class="line">	jQuery.extend = jQuery.fn.extend = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;...&#125;</span><br><span class="line">	jQuery.extend(&#123;</span><br><span class="line">		<span class="comment">// 一堆静态属性和方法</span></span><br><span class="line">	&#125;);</span><br><span class="line">	<span class="comment">// 工具方法 Utilities</span></span><br><span class="line">	<span class="comment">// 回调函数列表 Callbacks object</span></span><br><span class="line">	<span class="comment">// 浏览器功能测试 Support</span></span><br><span class="line">	<span class="comment">// 数据缓存 Data</span></span><br><span class="line">	<span class="comment">// 队列 Queue</span></span><br><span class="line">	<span class="comment">// 属性操作 Attributes</span></span><br><span class="line">	<span class="comment">// 事件系统 Events</span></span><br><span class="line">	<span class="comment">// 选择器 Sizzle</span></span><br><span class="line">	<span class="comment">// DOM遍历 Traversing</span></span><br><span class="line">	<span class="comment">// DOM操作 Manipulation</span></span><br><span class="line">	<span class="comment">// 样式操作 CSS</span></span><br><span class="line">	<span class="comment">// 异步请求 AJAX</span></span><br><span class="line">	<span class="comment">// 动画 Effects</span></span><br><span class="line">	<span class="comment">// 坐标 Offset 尺寸 Dimensions</span></span><br><span class="line">	<span class="built_in">window</span>.jQuery = <span class="built_in">window</span>.$ = jQuery;</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure>
<h2 id="源码分析">源码分析</h2><h3 id="jQuery无new构建">jQuery无new构建</h3><p>通常我们创建一个对象或实例的方式是在运算符new后紧跟一个构造函数，如下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">aQuery.prototype = &#123;</span><br><span class="line">	name : <span class="string">"aQuery"</span>,</span><br><span class="line">	getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> aQuery();</span><br><span class="line">a.getName <span class="comment">// aQuery</span></span><br></pre></td></tr></table></figure></p>
<p>但是jQuery并没有使用new运算符将jQuery显示实例化。而是直接调用其函数<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery(); <span class="comment">// 并非new jQuery();</span></span><br></pre></td></tr></table></figure></p>
<p>要实现jQuery()返回类的实例，可以这样操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> bQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.name = <span class="string">"bQuery"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> bQuery();</span><br><span class="line">&#125;</span><br><span class="line">aQuery.prototype = &#123;</span><br><span class="line">	name : <span class="string">"aQuery"</span>,</span><br><span class="line">	getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = aQuery();</span><br><span class="line">a.name <span class="comment">// bQuery</span></span><br></pre></td></tr></table></figure>
<p>在上面的示例中aQuery()返回new bQuery()的实例。如果我们把返回改成new aQuery()是不是就可以直接得到aQuery的实例了呢？答案是内存会溢出，死循环。</p>
<h4 id="如何返回一个正常的实例呢？">如何返回一个正常的实例呢？</h4><p>在aQuery原型上添加一个init方法，用来返回aQuery类;<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> aQuery.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">aQuery.prototype = &#123;</span><br><span class="line">	init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	name : <span class="string">"aQuery"</span>,</span><br><span class="line">	getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(aQuery());</span><br></pre></td></tr></table></figure></p>
<p>当执行aQuery()返回的实例：<br><img src="http://7nariv.com1.z0.glb.clouddn.com/7679296C-4824-491C-BDEA-969314DB28B8.png" alt=""><br>很明显aQuery()返回的是aQuery类的实例，那么在init中的this其实也是指向的aQuery类的实例，但是这样的实现存在这样一个问题，因为this是共享的，所以当一个实例改变this上的属性时，另一个实例对象相同的属性也会被改变。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> aQuery.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">aQuery.prototype = &#123;</span><br><span class="line">	init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=<span class="string">"bQuery"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	name : <span class="string">"aQuery"</span>,</span><br><span class="line">	getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;,</span><br><span class="line">	setName :<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = aQuery();</span><br><span class="line"><span class="keyword">var</span> b = aQuery();</span><br><span class="line">a.setName(<span class="string">"cQuery"</span>);</span><br><span class="line">b.getName() <span class="comment">// cQuery</span></span><br></pre></td></tr></table></figure></p>
<p>如何解决这个问题呢？</p>
<h4 id="分隔this，避免混淆">分隔this，避免混淆</h4><p>通过实例init函数，每次都构建新的init实例对象，来分隔this,避免交互混淆<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> aQuery.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">aQuery.prototype = &#123;</span><br><span class="line">	init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=<span class="string">"bQuery"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	name : <span class="string">"aQuery"</span>,</span><br><span class="line">	getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;,</span><br><span class="line">	setName :<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = aQuery();</span><br><span class="line"><span class="keyword">var</span> b = aQuery();</span><br><span class="line">a.setName(<span class="string">"cQuery"</span>);</span><br><span class="line">b.getName() <span class="comment">// bQuery</span></span><br></pre></td></tr></table></figure></p>
<p>这样生成的实例之间的属性就不会互相影响。</p>
<p>返回的实例对象是基于init新构建的实例，aQuery原型上的name,getName都不存在。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> aQuery.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">aQuery.prototype = &#123;</span><br><span class="line">	init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=<span class="string">"bQuery"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	name : <span class="string">"aQuery"</span>,</span><br><span class="line">	getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;,</span><br><span class="line">	setName :<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> a = aQuery();</span><br><span class="line">a.getName(); <span class="comment">//a.getName is not a function</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7nariv.com1.z0.glb.clouddn.com/FA0582F6-A896-4208-888D-2E8EF05943BE.png" alt=""></p>
<h4 id="如何访问aQuery类原型上的属性方法？">如何访问aQuery类原型上的属性方法？</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jQuery.fn.init.prototype = jQuery.fn;</span><br></pre></td></tr></table></figure>
<p>通过原型传递解决问题，jQuery()的原型对象覆盖了构造函数jQuery.fn.init()的原型对象,从而使构造函数jQuery.fn.init()的实例也可以访问构造函数jQuery()的原型方法和属性。因为是引用传递所以不需要担心这个循环引用的性能问题。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> aQuery = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> aQuery.prototype.init();</span><br><span class="line">&#125;</span><br><span class="line">aQuery.prototype = &#123;</span><br><span class="line">	init:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=<span class="string">"bQuery"</span>;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	name : <span class="string">"aQuery"</span>,</span><br><span class="line">	getName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line">aQuery.prototype.init.prototype = aQuery.prototype;</span><br><span class="line"><span class="keyword">var</span> a = aQuery();</span><br><span class="line">a.getName();<span class="comment">//bQuery</span></span><br></pre></td></tr></table></figure></p>
<p><img src="http://7nariv.com1.z0.glb.clouddn.com/3BDB6CF6-995E-46B1-99FD-1721D7D7C1E7.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="jQuery的模块分类和主要依赖关系">jQuery的模块分类和主要依赖关系</h2><p><img src="http://7nariv.com1.z0.glb.clouddn.com/jQuery总体架构.png" alt="jQuery总体架构"></p>]]>
    
    </summary>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
      <category term="源码阅读" scheme="http://yoursite.com/tags/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="jQuery源码阅读" scheme="http://yoursite.com/categories/jQuery%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[jQuery异步队列Deferred Object]]></title>
    <link href="http://yoursite.com/2015/07/24/code-jquery-defferd/"/>
    <id>http://yoursite.com/2015/07/24/code-jquery-defferd/</id>
    <published>2015-07-24T11:00:59.000Z</published>
    <updated>2015-09-30T09:11:12.000Z</updated>
    <content type="html"><![CDATA[<p>异步队列是在jQuery1.5中引入的，用于实现异步任务和回调函数的解耦，为ajax模块、队列模块、ready事件提供基础功能。<br><a id="more"></a></p>
<h2 id="jQuery-Callback">jQuery.Callback</h2><p><code>jQuery.Callback()</code>返回一个回调函数列表，用于增强对回调函数的管理，支持添加、移除、触发、锁定、禁用回调函数等功能。</p>
<p>在回调函数列表内部，通过一个数组来保存回调函数，其他方法则围绕这个数组进行操作和检测。</p>
<p>##jQuery.Deferred<br><code>jQuery.Deferred()</code>返回一个异步队列，用于增强回调函数及其状态的管理，支持添加回调函数到回调函数列表、触发回调函数列表、传播任意同步和异步回调函数的状态等功能。</p>
<p>在异步队列内部，维护了三个回调函数列表：成功回调函数列表、失败回调函数列表、消息回调函数列表，其他方法则对这三个队列进行操作和检测。</p>
<h2 id="jQuery-when">jQuery.when</h2><p><code>jQuery.when(deferreds)</code>提供了基于一个或多个对象的状态来执行回调函数的功能，通常是基于具有异步事件的异步队列。</p>
<p>如果传入多个异步队列，方法jQuery.when()返回一个新的主异步队列的只读副本，只读副本跟踪所传入的多个异步队列的最终状态。一旦所有的异步队列都变为成功状态，主异步队列的成功回调函数将被调用；如果其中一个异步队列的状态变为失败，主异步队列的失败回调函数将被调用。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>异步队列是在jQuery1.5中引入的，用于实现异步任务和回调函数的解耦，为ajax模块、队列模块、ready事件提供基础功能。<br>]]>
    
    </summary>
    
      <category term="jquery,源码阅读" scheme="http://yoursite.com/tags/jquery-%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
      <category term="jquery" scheme="http://yoursite.com/categories/jquery/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[常用的Node.js设计模式]]></title>
    <link href="http://yoursite.com/2015/07/24/guide-nodejs-model/"/>
    <id>http://yoursite.com/2015/07/24/guide-nodejs-model/</id>
    <published>2015-07-24T11:00:59.000Z</published>
    <updated>2015-09-30T09:10:56.000Z</updated>
    <content type="html"><![CDATA[<p>本文介绍了常见的设计模式，单例模式、观察者模式、工厂模式。而且还涉及到依赖注入、中间件等功能的介绍。<br><a id="more"></a></p>
<h2 id="什么是设计模式">什么是设计模式</h2><blockquote>
<p>A design pattern is a general,reusable solution to a commonly occurring problem.</p>
</blockquote>
<h3 id="单例模式">单例模式</h3><p>一般认为单例模式就是保证一个类只有一个实例，实现的方法一般是先判断实例存在与否，如果存在就直接返回，如果不存在则会创建对象，并将该对象保存在静态变量中，当下次请求时，则直接返回该对象，这就确保了一个类只有一个实例对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// single-class.js</span></span><br><span class="line"><span class="keyword">var</span> _instance = <span class="literal">null</span>;</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">Class</span>(<span class="params">time</span>)</span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name = <span class="string">"kenan"</span>;</span><br><span class="line">		<span class="keyword">this</span>.book = <span class="string">"Node.js"</span>;</span><br><span class="line">		<span class="keyword">this</span>.time = time;</span><br><span class="line">	&#125;</span><br><span class="line">	Class.prototype = &#123;</span><br><span class="line">		show : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">			<span class="built_in">console</span>.log(<span class="keyword">this</span>.book,<span class="string">" is write by "</span>,<span class="keyword">this</span>.name,<span class="string">",time is "</span>,<span class="keyword">this</span>.time);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">this</span>.getInstance = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(_instance === <span class="literal">null</span>)&#123;</span><br><span class="line">			_instance = <span class="keyword">new</span> Class(time);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> _instance;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>_instance</code>变量要放在单例方法之外，否则将无法实现单例模式。原因是调用单例方法时每次都会将其赋值为null,而放在单例方法之外，调用单例函数不会影响到<code>_instance</code>变量的值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// single-app.js</span></span><br><span class="line"><span class="keyword">var</span> Single = <span class="built_in">require</span>(<span class="string">"./single-class"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleObj1 = <span class="keyword">new</span> Single(<span class="string">"2010-03-01"</span>);</span><br><span class="line"><span class="keyword">var</span> singleClass1 = singleObj1.getInstance();</span><br><span class="line">singleClass1.show(); <span class="comment">// Node.js  is write by  kenan ,time is  2010-03-01</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleObj2 = <span class="keyword">new</span> Single(<span class="string">"2010-03-01"</span>);</span><br><span class="line"><span class="keyword">var</span> singleClass2 = singleObj2.getInstance();</span><br><span class="line">singleClass2.show(); <span class="comment">// Node.js  is write by  kenan ,time is  2010-03-01</span></span><br></pre></td></tr></table></figure>
<p>singleObj2和singleObj1是一样的，只是在new对象时传的时间不同，这个时间只要用来判断是否new了新的对象。运行single-app.js，我们发现两次运行结果是相同的，因此说明第二次new单例对象时，并没有创建新的Class类对象，而是返回了第一次创建的Class类对象。这样就实现了单例模式。</p>
<h3 id="观察者模式">观察者模式</h3><p>一个对象维护着一个依赖/观察者列表，并在依赖状态改变时，自动的通知观察者列表中的每个成员。要实现观察者模式，可以借助<code>EventEmitter</code>。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// MyFancyObservable.js</span></span><br><span class="line"><span class="keyword">var</span> util = <span class="built_in">require</span>(<span class="string">'util'</span>);</span><br><span class="line"><span class="keyword">var</span> EventEmitter = <span class="built_in">require</span>(<span class="string">'events'</span>).EventEmitter;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyFancyObservable</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	EventEmitter.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line">util.inherits(MyFancyObservable,EventEmitter);</span><br></pre></td></tr></table></figure>
<p>这样就创建了一个可被观察的对象。为它添加些功能</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MyFancyObservable.prototype.test = <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.emit(<span class="string">"hello"</span>,name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = MyFancyObservable;</span><br></pre></td></tr></table></figure>
<p>现在观察者可以发出事件了，<code>emit event</code>。我们执行<code>observable.test(&#39;john&#39;)</code>测试一下。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> MyFancyObservable = <span class="built_in">require</span>(<span class="string">"./MyFancyObservable"</span>);</span><br><span class="line"><span class="keyword">var</span> observable = <span class="keyword">new</span> MyFancyObservable();</span><br><span class="line"></span><br><span class="line">observable.on(<span class="string">'hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;);</span><br><span class="line">observable.on(<span class="string">'hello'</span>,<span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"test:"</span>,name);</span><br><span class="line">&#125;);</span><br><span class="line">observable.test(<span class="string">"john"</span>); <span class="comment">// john;test:john</span></span><br></pre></td></tr></table></figure></p>
<h3 id="工厂模式">工厂模式</h3><p>工厂模式使我们不需要使用构造器，而是通过提供一个泛型（通用）接口来创建对象。这种模式在创建过程变得复杂时会非常有用。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">MyClass</span> (<span class="params">options</span>) </span>&#123;  </span><br><span class="line">  <span class="keyword">this</span>.options = options;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">create</span>(<span class="params">options</span>) </span>&#123;  </span><br><span class="line">  <span class="comment">// modify the options here if you want</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> MyClass(options);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports.create = create;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>本文介绍了常见的设计模式，单例模式、观察者模式、工厂模式。而且还涉及到依赖注入、中间件等功能的介绍。<br>]]>
    
    </summary>
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="nodejs" scheme="http://yoursite.com/categories/nodejs/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何创建方法的别名]]></title>
    <link href="http://yoursite.com/2015/03/19/code-method-alias/"/>
    <id>http://yoursite.com/2015/03/19/code-method-alias/</id>
    <published>2015-03-19T09:15:27.000Z</published>
    <updated>2015-09-30T09:12:16.000Z</updated>
    <content type="html"><![CDATA[<p>在写代码时命名尽量符合当前函数的功能，比如addListener，但是在方法调用时又不想写这么长的函数，这时你可以使用别名。<br><a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">EventEmitter</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> proto = EventEmitter.prototype;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 别名方法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">alias</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">aliasClosure</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>[name].apply(<span class="keyword">this</span>,<span class="built_in">arguments</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 原型新增addListener方法 */</span></span><br><span class="line">proto.addListener = <span class="function"><span class="keyword">function</span> <span class="title">addListener</span>(<span class="params">evt</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"addListener"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 创建addListener方法别名on */</span></span><br><span class="line">proto.on = alias(<span class="string">"addListener"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> eTest = <span class="keyword">new</span> EventEmitter();</span><br><span class="line">eTest.addListener(); <span class="comment">// addListener</span></span><br><span class="line">eTest.on(); <span class="comment">// addListener</span></span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>在写代码时命名尽量符合当前函数的功能，比如addListener，但是在方法调用时又不想写这么长的函数，这时你可以使用别名。<br>]]>
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="代码阅读" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[通过示例了解基于原型继承]]></title>
    <link href="http://yoursite.com/2015/03/05/guide-prototype/"/>
    <id>http://yoursite.com/2015/03/05/guide-prototype/</id>
    <published>2015-03-05T09:15:27.000Z</published>
    <updated>2015-09-30T09:12:36.000Z</updated>
    <content type="html"><![CDATA[<h2 id="原型链的关系">原型链的关系</h2><p>构造函数都有原型对象<br>原型（指针 =&gt; 构造函数）<br>实例（指针 =&gt; 原型对象）</p>
<a id="more"></a>
<h2 id="假如让对象的原型等于另一个对象的实例，会发生什么？">假如让对象的原型等于另一个对象的实例，会发生什么？</h2><p>此时对象的原型就包含一个指向另一个对象的原型的指针。<br>另一个对象的原型又包含一个指向该构造函数的指针。</p>
<h2 id="用下面的示例来展现构造函数，原型及实例之间的关系">用下面的示例来展现构造函数，原型及实例之间的关系</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 构造函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.prop = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 原型上添加方法</span></span><br><span class="line">SuperType.prototype.getVal = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">this</span>.prop;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 另一个构造函数 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.prop = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="如何让SubType继承SuperType?">如何让SubType继承SuperType?</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SubType.prototype <span class="comment">// SubType &#123;&#125;</span></span><br><span class="line">SubType.prototype.constructor <span class="comment">// function SubType()&#123;this.prop=false;&#125;</span></span><br><span class="line">SuperType.prototype <span class="comment">// SuperType &#123;getVal: function&#125;</span></span><br><span class="line">SuperType.prototype.constructor <span class="comment">// function SuperType()&#123;this.prop=true;&#125;</span></span><br></pre></td></tr></table></figure>
<p>初始时,SubType原型（SubType.prototype）指针指向function SubType(){…}，SuperType原型（SuperType.prototype）指针指向function SuperType(){…}。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br></pre></td></tr></table></figure>
<p>让原型（SubType.prototype）等于实例（new SuperType()）</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SubType.prototype <span class="comment">// SuperType &#123;prop: true, getVal: function&#125;</span></span><br><span class="line">SubType.prototype.constructor <span class="comment">// function SuperType()&#123;this.prop=true;&#125;</span></span><br><span class="line">SuperType.prototype <span class="comment">// SuperType &#123;getVal: function&#125;</span></span><br><span class="line">SuperType.prototype.constructor <span class="comment">// function SuperType()&#123;this.prop=true;&#125;</span></span><br></pre></td></tr></table></figure>
<p>该原型（SubType.prototype）就包含一个指向另一个原型的指针（SuperType.prototype）,该原型（SubType.prototype）的指针也随即指向了SuperType.prototype的构造函数function SuperType(){…}。</p>
<p>并且SubType.prototype继承了SuperyType实例的所有属性和方法。</p>
<h5 id="实例（instance）包含一个指向原型（SubType-prototype）的指针">实例（instance）包含一个指向原型（SubType.prototype）的指针</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> SubType();</span><br><span class="line">instance.getVal(); <span class="comment">// false;</span></span><br><span class="line">instance.constructor <span class="comment">// function SuperType()&#123;this.prop=true;&#125;</span></span><br></pre></td></tr></table></figure>
<p>原型（SubType.prototype）的构造函数现在是function SuperType(){…}，这样它的实例的构造函数也是function SuperType(){…}。</p>
<p>原型（SubType.prototype）中prop：true，但是function SubType(){this.prop=false;}中prop的值覆盖了原型上的值，所以 instance.getVal()返回false。</p>
<h2 id="原型继承的问题">原型继承的问题</h2><p>原型中所有属性是被实例共享的，这种共享对于函数非常合适。对于那些包含基本值的属性倒也说的过去，可以通过实例上添加同名属性，就可以隐藏原型中对应的属性。（比如上面的SubType中的prop）。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SuperType</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.colors = [<span class="string">"red"</span>,<span class="string">"blue"</span>,<span class="string">"green"</span>];</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">SubType</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">SubType.prototype = <span class="keyword">new</span> SuperType();</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance1.colors.push(<span class="string">"black"</span>); <span class="comment">// 这里的color属性就是引用属性</span></span><br><span class="line">instance1.colors <span class="comment">// ["red","blue","green","black"]</span></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> SubType();</span><br><span class="line">instance2.colors <span class="comment">// ["red","blue","green","black"]</span></span><br></pre></td></tr></table></figure>
<p>正因为属性是被所有实例共享的，所以当使用引用属性时，就会影响所有实例。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="原型链的关系">原型链的关系</h2><p>构造函数都有原型对象<br>原型（指针 =&gt; 构造函数）<br>实例（指针 =&gt; 原型对象）</p>]]>
    
    </summary>
    
      <category term="笔记" scheme="http://yoursite.com/tags/%E7%AC%94%E8%AE%B0/"/>
    
      <category term="读书笔记" scheme="http://yoursite.com/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[iscroll5使用参考]]></title>
    <link href="http://yoursite.com/2014/10/30/guide-iscroll5/"/>
    <id>http://yoursite.com/2014/10/30/guide-iscroll5/</id>
    <published>2014-10-30T11:00:59.000Z</published>
    <updated>2015-09-30T09:12:46.000Z</updated>
    <content type="html"><![CDATA[<h1 id="如何开始">如何开始</h1><p>var myScroll = new IScroll(‘#wrapper’);<br>第一个参数：选择器的字符串或原生元素的引用<br>比如：<br>var wrapper = document.getElementById(‘wrapper’);<br>var myScroll = new Scroll(wrapper);<a id="more"></a></p>
<h2 id="实例化">实例化</h2><p>iScoll必须在DOM就绪后实例化，主要有以下几各方法：<br>onload事件，onDOMContentLoaded事件，以内联方式放在你想滚动的html代码后面。<br>iScoll必须知道滚动区域的宽/高值，如果内容中图片没有明确的宽/高，那么iScroll很有可能在生成错误的滚动区。可以给滚动容器添加position:relative或absolute,这个可以解决一些尺寸计算有误的问题。</p>
<h3 id="onDOMContentLoaded事件">onDOMContentLoaded事件</h3><p>如果滚动的内容只有文字和固定尺寸的图片，你可以使用DOMContentLoaded事件。<br>var myScroll;<br>function loaded(){<br>    myScroll = new IScroll(‘#wrapper’);<br>}<br>document.addEventListener(‘DOMContentLoaded’,loaded,false);</p>
<h3 id="onLoad事件">onLoad事件</h3><p>有时内容为准备好，DOM未加载完，使用DOMContentLoaded事件有些仓促，可以使用onLoad事件。给浏览器添加100或200的延迟也可以解决一些问题。<br>var myScroll;<br>function loaded(){<br>   setTimeout(function(){<br>        myScroll = new IScroll(’#wrapper’);<br>    },100);<br>}<br>window.addEventListener(‘load’,loaded,false);</p>
<h2 id="配置">配置</h2><p>console.dir(myScroll.options);可以在控制台打印出iscoll执行时的配置内容</p>
<h3 id="了解核心">了解核心</h3><p>iScroll使用综合技术依赖于浏览器/硬件的本身特点进行滚动。通常情况下你不需要单独配置，iscroll会自动选择引擎。<br>options.useTransform Default:true<br>如果设置为false，则使用position:absolute;<br>options.useTransition Default:true<br>如果设置为false，则使用requestAnimationFrame来代替。旧机型上效果比较明显。<br>options.HWCompositing<br>硬件加速通过设置CSS的transform的translateZ(0) 来启用。当有很多元素而硬件加速跟不上时可以设置为false.</p>
<h3 id="基础特征">基础特征</h3><p>options.bounce:true //是否超过实际边界时回弹<br>options.click:false //覆盖iscroll禁用的默认浏览器事件，比如鼠标点击。<br>options.disableMouse:false<br>options.disablePointer:false<br>options.disableTouch:false //默认检测所有的事件，当知道脚本运行环境时可以禁用某些事件<br>options.eventPassthrough:false //设置这个值为true，可以在保持原生垂直滚动的基础上添加横向滚动<br>options.freeScroll:false//没看出有什么特殊效果<br>options.keyBindings:false //设置为true可以绑定快捷键<br>options.invertWheelDirection:false //开启滚轮事件后，是否反转方向<br>options.momentum:true //动力动画是否开启，关闭后性能为提高<br>options.mouseWhell:false //是否开启滚轮事件兼听,开启后滚轮生效<br>options.preventDefault:true //事件触发时是否preventDefault();<br>options.scrollbars:false //是否显示滚动条<br>options.scrollX<br>options.scrollY //默认情况下开启垂直滚动<br>options.startX<br>options.startY //默认起始值为(0,0),可以指定起始的位置<br>options.tap //设置为true让iScroll自定义的tap事件</p>
<h3 id="高级选项">高级选项</h3><p>options.bounceEasing //定义弹跳动画执行的function<br>options.bounceTime //定义弹跳动画持续的时长</p>
<h3 id="有用的scroller信息">有用的scroller信息</h3><p>iScroll存储了许多有用的信息，用来增强你的应用。<br>myScroll.x/y //当前的位置<br>myScroll.directionX/Y //最后的方向(-1 向下/向右，0 保持，1 向上/向左)<br>myScroll.currentPage //当前对齐点的信息，可以配合options.snap:true使用</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="如何开始">如何开始</h1><p>var myScroll = new IScroll(‘#wrapper’);<br>第一个参数：选择器的字符串或原生元素的引用<br>比如：<br>var wrapper = document.getElementById(‘wrapper’);<br>var myScroll = new Scroll(wrapper);]]>
    
    </summary>
    
      <category term="study" scheme="http://yoursite.com/tags/study/"/>
    
      <category term="iscroll" scheme="http://yoursite.com/categories/iscroll/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[获取location.url里指定参数的值]]></title>
    <link href="http://yoursite.com/2014/10/23/code-get-param-location/"/>
    <id>http://yoursite.com/2014/10/23/code-get-param-location/</id>
    <published>2014-10-23T10:47:54.000Z</published>
    <updated>2015-09-30T08:57:07.000Z</updated>
    <content type="html"><![CDATA[<p>获取location.url里指定参数的值<a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQuery</span>(<span class="params">para</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span>+para +<span class="string">"=([^&amp;]*)(&amp;|$)"</span>); </span><br><span class="line">	<span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg); </span><br><span class="line">	<span class="keyword">if</span>(r!=<span class="literal">null</span>)&#123; </span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); </span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">null</span>; </span><br><span class="line">&#125;</span><br><span class="line">getQuery(id);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<p>获取location.url里指定参数的值]]>
    
    </summary>
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
      <category term="代码片断" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[javascript实现滚动动画]]></title>
    <link href="http://yoursite.com/2014/10/23/code-iscroll-animation/"/>
    <id>http://yoursite.com/2014/10/23/code-iscroll-animation/</id>
    <published>2014-10-23T09:15:27.000Z</published>
    <updated>2014-10-24T10:52:17.000Z</updated>
    <content type="html"><![CDATA[<p>移动端页面实现返回顶部效果<a id="more"></a></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">scrollTopBy</span>(<span class="params">endTop,easing</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> beginTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">	<span class="keyword">var</span> range = endTop - beginTop;</span><br><span class="line">	<span class="keyword">var</span> start = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">var</span> step = <span class="number">20</span>;</span><br><span class="line">	<span class="keyword">var</span> total = <span class="built_in">Math</span>.abs(<span class="built_in">Math</span>.ceil(range / step));</span><br><span class="line">	<span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">startScroll</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(start &lt;= total)&#123;</span><br><span class="line">			<span class="keyword">var</span> top = <span class="built_in">Math</span>.round(easing(start,beginTop,range,total));</span><br><span class="line">			<span class="built_in">window</span>.scrollTo(<span class="number">0</span>,top);</span><br><span class="line">			start ++;</span><br><span class="line">			timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">				startScroll();</span><br><span class="line">			&#125;,<span class="number">13</span>);	</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			clearTimeout(timer);</span><br><span class="line">			timer = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	startScroll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> endTop = $(<span class="built_in">window</span>).scrollTop();</span><br><span class="line">scrollTopBy(endTop,<span class="function"><span class="keyword">function</span>(<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> c*t/d + b;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>移动端页面实现返回顶部效果]]>
    
    </summary>
    
      <category term="code" scheme="http://yoursite.com/tags/code/"/>
    
      <category term="代码片断" scheme="http://yoursite.com/categories/%E4%BB%A3%E7%A0%81%E7%89%87%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2012/03/05/hello-world/"/>
    <id>http://yoursite.com/2012/03/05/hello-world/</id>
    <published>2012-03-05T09:15:27.000Z</published>
    <updated>2015-09-30T09:29:27.000Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">trobuleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io]]>
    </summary>
    
  </entry>
  
</feed>
